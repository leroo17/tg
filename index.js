// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ø–∏ –¢–ì –≤ –ø—Ä–æ–µ–∫—Ç
// npm init
// npm i node-telegram-bot-api nodemon

// –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ package.json
// "dev": "nodemon index.js",
// "start": "node index.js"

// –≤ index.js:



const TelegramApi = require('node-telegram-bot-api');
require('dotenv').config();
const cron = require('node-cron');
const CHANNEL_ID = '@calendar_football';
const pool = require('./bd');
const { numberOptions, fruitOptions, againOptions} = require ('./options');

const token = process.env.TOKEN;
const bot = new TelegramApi(token, {polling:  true});
const chats = {};

const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
const fruits = ['üçå', 'üçè', 'üçê', 'üçã', 'üçã‚Äçüü©', 'üçâ', 'üçá', 'üçì'];
const emojies = [
    'üé≤', 'üçÄ', 'ü¶ä', 'üè∞', 'üßù‚Äç‚ôÄÔ∏è', '‚ú®', 'üåü'
];
const stickers = [
    'CAACAgIAAxkBAAEOfuxoBAU9GifxaGL2sPHsQHphmxF4NQACygcAApb6EgWAD8KJKK3uKTYE'
];

// const startGame = async (chatId) => {
//        await bot.sendMessage(chatId, '–Ø –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É 1-9, –∞ —Ç—ã —É–≥–∞–¥–∞–π!');
//        const randomNumber = Math.floor(Math.random() * 10);
//        chats[chatId] = randomNumber;
//        await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥–∞–π!', numberOptions);
// }

// const startFruitGame = async (chatId) => {
//         await bot.sendMessage(chatId, '–£–≥–∞–¥–∞–π —Ñ—Ä—É–∫—Ç, —á—Ç–æ —è –∑–∞–≥–∞–¥–∞–ª!');
//         const randomFruit = Math.floor(Math.random() * fruits.length);
//         chats[chatId] = randomFruit;
//         await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥–∞–π!', gameOptions);
// }

function sendPostToChannel(content) {
    bot.sendMessage(CHANNEL_ID, content)
      .then(() => console.log('–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!'))
      .catch(err => console.error('–û—à–∏–±–∫–∞:', err));
  }
  
  const postContent = '–§—ã—Ä-—Ñ—ã—Ä ü¶ä\n#—Ç–µ—Å—Ç';
  sendPostToChannel(postContent);

const startUniversalGame = async (chatId, greetingGameText, gameType, arrayElements, optionsElements) => {
        await bot.sendMessage(chatId, greetingGameText);
        const randomElement = Math.floor(Math.random() * arrayElements.length);
        chats[chatId] = {
            gameType: gameType,
            answer: randomElement
        };
        await bot.sendMessage(chatId, '–û—Ç–≥–∞–¥–∞–π!', optionsElements);
    };
    
const start = () => {

    bot.setMyCommands([
        {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
        {command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'},
        {command: '/stat', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä'},
        {command: '/gamenumbers', description: '–ò–≥—Ä–∞ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'},
        {command: '/gamefruits', description: '–ò–≥—Ä–∞ –£–≥–∞–¥–∞–π —Ñ—Ä—É–∫—Ç'}
    ]);

    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;

        const greetingOptions = [`–ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–Ω–∏–∫, –∑–∞—Ö–æ–¥–∏ –≤ —Ç–∞–≤–µ—Ä–Ω—É!`, `${msg.from.first_name}! –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è!`, `${msg.from.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`, `${msg.from.first_name}, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, –¥—Ä—É–∂–∏—â–µ!`, `${msg.from.first_name}, —Ä—ã–∂–∞—è —ç–ª—å—Ñ–∏–π–∫–∞, —á–µ–≥–æ —Ç—ã –∑–∞–±—ã–ª–∞ –≤ –Ω–∞—à–∏—Ö –ª–µ—Å–∞—Ö?!`];
        const randomGreeting = greetingOptions[Math.floor(Math.random() * greetingOptions.length)];
        
        const randomSticker = stickers[Math.floor(Math.random() * stickers.length)];

        if (!text) return;
    
        if (text === '/start') {
            await bot.sendSticker(chatId, randomSticker);
            return bot.sendMessage(chatId, `${randomGreeting}`);
        }
        if (text === '/info') {
            return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name}`);
        }
        if (text === '/stat') {
            return bot.sendMessage(chatId, `–©–∞—Å –≤—ã–∫–∞—á—É —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∏–≥—Ä–∞—Ö`);
        }
        if (text === '/gamenumbers') {
            return startUniversalGame(chatId, '–Ø –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É 1-9, –∞ —Ç—ã —É–≥–∞–¥–∞–π!', 'numbers', numbers, numberOptions);
        }
        if (text === '/gamefruits') {
            return startUniversalGame(chatId, '–£–≥–∞–¥–∞–π —Ñ—Ä—É–∫—Ç, —á—Ç–æ —è –∑–∞–≥–∞–¥–∞–ª!', 'fruits', fruits, fruitOptions);
        }
    
        return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é ü¶ä');
    });

    bot.on('callback_query', async msg => {
            const data = msg.data;
            const chatId = msg.message.chat.id;
        
            if (data === '/again') {
                if (chats[chatId] && chats[chatId].gameType === 'numbers') {
                    return startUniversalGame(chatId, '–Ø –∑–∞–≥–∞–¥–∞—é —Ü–∏—Ñ—Ä—É 1-9, –∞ —Ç—ã —É–≥–∞–¥–∞–π!', 'numbers', numbers, numberOptions);
                }
                if (chats[chatId] && chats[chatId].gameType === 'fruits') {
                    return startUniversalGame(chatId, '–£–≥–∞–¥–∞–π —Ñ—Ä—É–∫—Ç, —á—Ç–æ —è –∑–∞–≥–∞–¥–∞–ª!', 'fruits', fruits, fruitOptions);
                }
                return startUniversalGame(chatId, '–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É!', 'numbers', numbers, numberOptions);
            }
        
            const currentGame = chats[chatId];
            if (!currentGame) {
                return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —á–µ—Ä–µ–∑ /gamenumbers –∏–ª–∏ /gamefruits!');
            }
            let isWin = false;
            let correctAnswer;

                try {

                    if (currentGame.gameType === 'numbers') {
                        const userChoice = Number(data);
                        isWin = userChoice === currentGame.answer;
                        correctAnswer = currentGame.answer;
                    } else if (currentGame.gameType === 'fruits') {
                        const userChoice = data; // –∑–¥–µ—Å—å —É–∂–µ —Ç–µ–∫—Å—Ç —ç–º–æ–¥–∑–∏
                        console.log(userChoice);
                        isWin = userChoice === fruits[currentGame.answer]; // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏ —Å —ç–º–æ–¥–∑–∏
                        correctAnswer = fruits[currentGame.answer];
                    }

                    await pool.query(`
                        INSERT INTO game_statistic (chat_id, gameType, wins, games_total)
                        VALUES (?, ?, ?, 1)
                        ON DUPLICATE KEY UPDATE 
                        wins = wins + ?,
                        games_total = games_total + 1
                    `, [chatId, currentGame.gameType, isWin ? 1 : 0, isWin ? 1 : 0]);
                    
                    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î');
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', err);
                }
        
            const answerText = isWin
                ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª ${correctAnswer}! üéâ`
                : `–£–≤—ã, —è –∑–∞–≥–∞–¥–∞–ª ${correctAnswer} üòú`;

            await bot.sendMessage(chatId, `–¢—ã –≤—ã–±—Ä–∞–ª ${data}`);
            await bot.sendMessage(chatId, answerText, againOptions);
        });
};

start();

